# This workflow runs on pull request events and issue comments
name: PR Environment

on:
  pull_request:
    types: [
        opened, # When a PR is created
        synchronize, # When a PR is updated (new commits)
        reopened, # When a closed PR is reopened
        closed, # When a PR is closed
        ready_for_review, # When a draft PR is marked ready
        converted_to_draft, # When a PR is converted to draft
      ]
  issue_comment:
    types: [created] # When a comment is added to a PR

env:
  DOCKER_USERNAME: developeraipacto

jobs:
  # Job to check the state of the PR and decide on deploy/destroy
  check-pr-state:
    runs-on: ubuntu-latest # Run on latest Ubuntu runner
    outputs: # Outputs to be used by other jobs
      should_deploy: ${{ steps.check.outputs.should_deploy }} # Whether to deploy
      should_destroy: ${{ steps.check.outputs.should_destroy }} # Whether to destroy
      is_draft: ${{ steps.check.outputs.is_draft }} # If the PR is a draft
    steps:
      - name: Check PR state
        id: check
        uses: actions/github-script@v7
        with:
          script: |
            let pr;
            let action = context.payload.action;
            let isComment = context.eventName === 'issue_comment';
            // Resolve PR number safely for both pull_request and issue_comment events
            const prNumber = context.payload.pull_request?.number ?? context.payload.issue?.number;

            if (isComment) {
              // For comments, get PR details
              pr = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              }).data;
              // Simulate action based on command, but for draft check
              action = 'comment'; // placeholder
            } else {
              pr = context.payload.pull_request;
            }

            if (pr) {
              const isDraft = pr.draft === true;
              const isClosed = pr.state === 'closed';
              
              // Determine what to do
              let shouldDeploy = false;
              let shouldDestroy = false;
              
              // Deploy/Destroy Decision Logic:
              // - Destroy only on explicit state transitions (closed, converted_to_draft)
              // - Deploy on PR events that indicate active development (opened, ready_for_review, reopened, synchronize)
              // - For issue comments, deploy if command is given and PR is not draft
              // - Do NOT destroy just because PR is currently draft (allows draft PRs to be deployed manually)
              if (action === 'closed') {
                shouldDestroy = true;
              } else if (action === 'converted_to_draft') {
                shouldDestroy = true;
              } else if (!isDraft && (action === 'opened' || action === 'ready_for_review' || action === 'reopened' || action === 'synchronize' || action === 'comment')) {
                shouldDeploy = true;
              }
              
              core.setOutput('should_deploy', shouldDeploy);
              core.setOutput('should_destroy', shouldDestroy);
              core.setOutput('is_draft', isDraft);
              
              console.log(`PR #${pr.number}: draft=${isDraft}, closed=${isClosed}, action=${action}`);
              console.log(`Decision: deploy=${shouldDeploy}, destroy=${shouldDestroy}`);
            } else {
              core.setOutput('should_deploy', false);
              core.setOutput('should_destroy', false);
              core.setOutput('is_draft', false);
            }

  # Job to parse commands from PR comments (like /deploy)
  check-command:
    runs-on: ubuntu-latest
    outputs:
      command: ${{ steps.parse.outputs.command }} # The parsed command
      should_proceed: ${{ steps.parse.outputs.should_proceed }} # If we should proceed
    steps:
      - name: Parse command
        id: parse
        uses: actions/github-script@v7
        with:
          script: |
            // For non-comment events, set default outputs
            if (context.eventName !== 'issue_comment') {
              core.setOutput('command', '');
              core.setOutput('should_proceed', false);
              return;
            }

            const comment = context.payload.comment.body.toLowerCase().trim();
            let command = '';
            let should_proceed = false;

            // Check if comment is from a PR (not issue)
            const isPR = context.payload.issue.pull_request !== undefined;
            if (!isPR) {
              core.setOutput('command', '');
              core.setOutput('should_proceed', false);
              return;
            }

            if (comment === '/deploy') {
              command = 'deploy';
              should_proceed = true;
            } else if (comment === '/destroy') {
              command = 'destroy';
              should_proceed = true;
            } else if (comment === '/redeploy') {
              command = 'redeploy';
              should_proceed = true;
            }

            core.setOutput('command', command);
            core.setOutput('should_proceed', should_proceed);

  deploy-pr:
    # Deploy Job Conditions:
    # - For pull_request events: deploy if check-pr-state says should_deploy=true
    # - For issue_comment events: deploy if command is 'deploy' or 'redeploy' AND PR is not draft
    if: |
      (github.event_name == 'pull_request' && needs.check-pr-state.outputs.should_deploy == 'true') ||
      (github.event_name == 'issue_comment' && (needs.check-command.outputs.command == 'deploy' || needs.check-command.outputs.command == 'redeploy') && needs.check-pr-state.outputs.is_draft == 'false')
    needs: [check-pr-state, check-command]
    runs-on: ubuntu-latest
    permissions:
      contents: read # Read repository contents
      pull-requests: write # Write to PRs (for comments)
      packages: write # Write to GitHub Packages
    env:
      TF_VAR_hcloud_token: ${{ secrets.HCLOUD_TOKEN }} # Hetzner Cloud token
      TF_VAR_pr_number: ${{ github.event.pull_request.number || github.event.issue.number }} # PR number
      TF_VAR_github_actor: ${{ github.actor }} # GitHub username
      TF_VAR_github_branch: ${{ github.head_ref || github.ref_name }} # Branch name
      TF_VAR_github_sha: ${{ github.event.pull_request.head.sha || github.sha }} # Commit SHA
      TF_VAR_auto_destroy: false # Don't auto-destroy after TTL
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: eu-central-1
      AWS_EC2_METADATA_DISABLED: true

    steps:
      # Get the source code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }} # Checkout specific commit

      - name: Validate PR is not a draft
        if: github.event_name == 'issue_comment' && needs.check-pr-state.outputs.is_draft == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request?.number ?? context.payload.issue?.number;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: `❌ **Deployment Failed**\n\nCannot deploy draft PR. Please mark the PR as ready for review before deploying.`
            });
            core.setFailed('Cannot deploy draft PR');

      # Initialize sticky comment at start
      - name: Initialize deployment status comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          recreate: true
          header: deployment-status
          message: |
            ### Deployment Status for PR #${{ github.event.pull_request.number || github.event.issue.number }} (Commit: ${{ github.sha }})
            - ☐ Validating setup
            - ☐ Building images
            - ☐ Deploying infrastructure
            - ☐ Checking health
            - ☐ Complete

      - name: Validate required secrets
        run: |
          if [ -z "${{ secrets.HCLOUD_TOKEN }}" ]; then
            echo "❌ HCLOUD_TOKEN secret is required"
            exit 1
          fi
          if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
            echo "❌ AWS_ACCESS_KEY_ID secret is required"
            exit 1
          fi
          if [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
            echo "❌ AWS_SECRET_ACCESS_KEY secret is required"
            exit 1
          fi
          if [ -z "${{ secrets.SSH_KEY_NAME }}" ]; then
            echo "❌ SSH_KEY_NAME secret is required"
            exit 1
          fi
          echo "✅ All required secrets are present"

      - name: Validate infrastructure files
        run: |
          if [ ! -f "packages/infrastructure/docker/server.Dockerfile" ]; then
            echo "❌ Server Dockerfile not found"
            exit 1
          fi
          if [ ! -f "packages/infrastructure/docker/web.Dockerfile" ]; then
            echo "❌ Web Dockerfile not found"
            exit 1
          fi
          if [ ! -d "packages/infrastructure/terraform/environments/pr" ]; then
            echo "❌ PR Terraform environment not found"
            exit 1
          fi
          echo "✅ All infrastructure files are present"

      # Update status after validations
      - name: Update status - Validations complete
        if: success()
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          recreate: true
          header: deployment-status
          message: |
            ### Deployment Status for PR #${{ github.event.pull_request.number || github.event.issue.number }} (Commit: ${{ github.sha }})
            - ✅ Validating setup
            - ☐ Building images
            - ☐ Deploying infrastructure
            - ☐ Checking health
            - ☐ Complete

      - name: Install hcloud CLI
        run: |
          curl -L https://github.com/hetznercloud/cli/releases/download/v1.42.0/hcloud-linux-amd64.tar.gz \
          | tar xz
          sudo mv hcloud /usr/local/bin/hcloud

      - name: Check PR environment limit
        run: |
          # Count existing PR environments to prevent resource exhaustion
          # Uses Hetzner Cloud CLI to list servers with 'pr-' prefix in environment selector
          COUNT=$(hcloud server list --selector environment~pr- -o json | jq length)
          if [ $COUNT -ge 15 ]; then
            echo "❌ Maximum PR environments reached (15)"
            exit 1
          fi
          echo "✅ PR environment limit check passed"

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Registry
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push images
        # Cache from GitHub Actions and push to GitHub Container Registry
        run: |
          docker buildx build \
          -f packages/infrastructure/docker/server.Dockerfile \
          -t ${{ env.DOCKER_USERNAME }}/aipacto-server:pr-${{ github.event.pull_request.number || github.event.issue.number }} \
          --cache-from=type=gha \
          --cache-to=type=gha,mode=max \
          --push .

          docker buildx build \
          -f packages/infrastructure/docker/web.Dockerfile \
          -t ${{ env.DOCKER_USERNAME }}/aipacto-web:pr-${{ github.event.pull_request.number || github.event.issue.number }} \
          --cache-from=type=gha \
          --cache-to=type=gha,mode=max \
          --push .

      # Update status after build
      - name: Update status - Images built
        if: success()
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          recreate: true
          header: deployment-status
          message: |
            ### Deployment Status for PR #${{ github.event.pull_request.number || github.event.issue.number }} (Commit: ${{ github.sha }})
            - ✅ Validating setup
            - ✅ Building images
            - ☐ Deploying infrastructure
            - ☐ Checking health
            - ☐ Complete

      - name: Install Nomad CLI
        run: |
          wget https://releases.hashicorp.com/nomad/1.10.4/nomad_1.10.4_linux_amd64.zip
          unzip nomad_1.10.4_linux_amd64.zip
          sudo mv nomad /usr/local/bin/
          nomad version

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Create tfvars
        working-directory: packages/infrastructure/terraform/environments/pr
        run: |
          cat > terraform.auto.tfvars <<EOF
          ssh_key_names = ["${{ secrets.SSH_KEY_NAME }}"]
          EOF

      - name: Terraform Init
        working-directory: packages/infrastructure/terraform/environments/pr
        run: |
          terraform init -backend-config="key=pr-${{ github.event.pull_request.number || github.event.issue.number }}/terraform.tfstate"

      - name: Terraform Plan
        id: plan
        working-directory: packages/infrastructure/terraform/environments/pr
        run: |
          terraform plan -no-color -out=tfplan 2>&1 | tee plan_output.txt
          echo "stdout<<EOF" >> $GITHUB_OUTPUT
          cat plan_output.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Check for changes
        id: has_changes
        working-directory: packages/infrastructure/terraform/environments/pr
        run: |
          if grep -q "No changes" plan_output.txt; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Comment Plan on PR
        if: steps.has_changes.outputs.has_changes == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request?.number ?? context.payload.issue?.number;
            const fs = require('fs');
            const plan = fs.readFileSync('packages/infrastructure/terraform/environments/pr/plan_output.txt', 'utf8');
            const output = '#### Terraform Plan 📖\n'
              + '<details><summary>Show Plan</summary>\n\n'
              + '```terraform\n' + plan + '\n```\n'
              + '</details>';
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: output
            });

      - name: Deploy PR Infrastructure
        working-directory: packages/infrastructure/terraform/environments/pr
        run: |
          terraform apply tfplan

      # Update status after terraform
      - name: Update status - Infrastructure deployed
        if: success()
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          recreate: true
          header: deployment-status
          message: |
            ### Deployment Status for PR #${{ github.event.pull_request.number || github.event.issue.number }} (Commit: ${{ github.sha }})
            - ✅ Validating setup
            - ✅ Building images
            - ✅ Deploying infrastructure
            - ☐ Checking health
            - ☐ Complete

      - name: Get outputs
        id: tf_output
        working-directory: packages/infrastructure/terraform/environments/pr
        run: |
          echo "url=$(terraform output -raw environment_url)" >> $GITHUB_OUTPUT
          echo "nomad_ui=$(terraform output -raw nomad_ui)" >> $GITHUB_OUTPUT

      - name: Wait for deployment health
        run: |
          # Health check loop: wait up to 5 minutes (30 * 10s) for deployment to be ready
          # Uses curl to check /health endpoint, exits early on success
          URL=${{ steps.tf_output.outputs.url }}
          for i in {1..30}; do
            if curl -f "$URL/health"; then
              echo "✅ Deployment healthy"
              break
            fi
            echo "Waiting for health... ($i/30)"
            sleep 10
          done
          if [ $i -eq 30 ]; then
            echo "❌ Health check failed"
            exit 1
          fi

      # Update status after health check
      - name: Update status - Health check passed
        if: success()
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          recreate: true
          header: deployment-status
          message: |
            ### Deployment Status for PR #${{ github.event.pull_request.number || github.event.issue.number }} (Commit: ${{ github.sha }})
            - ✅ Validating setup
            - ✅ Building images
            - ✅ Deploying infrastructure
            - ✅ Checking health
            - ☐ Complete

      - name: Comment deployment success
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request?.number ?? context.payload.issue?.number;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: `✅ **PR Preview Ready!**

              🌐 **Preview URL**: ${{ steps.tf_output.outputs.url }}
              📊 **Nomad UI**: ${{ steps.tf_output.outputs.nomad_ui }}

              **Available Commands**:
              - \`/redeploy\` - Redeploy this environment
              - \`/destroy\` - Manually destroy environment

              ⚠️ **Note**: Environment will be automatically destroyed when this PR is closed or converted to draft.`
            });

      # Final status update on success
      - name: Update status - Deployment complete
        if: success()
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          recreate: true
          header: deployment-status
          message: |
            ### Deployment Status for PR #${{ github.event.pull_request.number || github.event.issue.number }} (Commit: ${{ github.sha }})
            - ✅ Validating setup
            - ✅ Building images
            - ✅ Deploying infrastructure
            - ✅ Checking health
            - ✅ Complete

      # Status update on failure
      - name: Update status - Deployment failed
        if: failure()
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          append: true
          header: deployment-status
          message: "❌ **Deployment failed** - Check workflow logs for details."

  destroy-pr:
    # Destroy Job Conditions:
    # - For pull_request events: destroy if check-pr-state says should_destroy=true
    # - For issue_comment events: destroy if command is 'destroy'
    if: |
      (github.event_name == 'pull_request' && needs.check-pr-state.outputs.should_destroy == 'true') ||
      (github.event_name == 'issue_comment' && needs.check-command.outputs.command == 'destroy')
    needs: [check-pr-state, check-command]
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write # For adding comments
    env:
      TF_VAR_hcloud_token: ${{ secrets.HCLOUD_TOKEN }}
      TF_VAR_pr_number: ${{ github.event.pull_request.number || github.event.issue.number }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: eu-central-1
      AWS_EC2_METADATA_DISABLED: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate required secrets
        run: |
          if [ -z "${{ secrets.HCLOUD_TOKEN }}" ]; then
            echo "❌ HCLOUD_TOKEN secret is required"
            exit 1
          fi
          if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
            echo "❌ AWS_ACCESS_KEY_ID secret is required"
            exit 1
          fi
          if [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
            echo "❌ AWS_SECRET_ACCESS_KEY secret is required"
            exit 1
          fi
          echo "✅ All required secrets are present"

      - name: Validate infrastructure files
        run: |
          if [ ! -d "packages/infrastructure/terraform/environments/pr" ]; then
            echo "❌ PR Terraform environment not found"
            exit 1
          fi
          echo "✅ Infrastructure files are present"

      - name: Comment destroying
        if: github.event_name == 'pull_request' && github.event.action != 'closed'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request?.number ?? context.payload.issue?.number;
            // Determine destroy reason for user feedback
            // Skip comment if PR is being closed (will be handled by close event)
            const reason = context.payload.action === 'converted_to_draft' ? 
              'PR converted to draft' : 
              'PR closed';

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: `♻️ **Destroying PR Environment**\n\nReason: ${reason}`
            });

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: packages/infrastructure/terraform/environments/pr
        run: terraform init -backend-config="key=pr-${{ github.event.pull_request.number || github.event.issue.number }}/terraform.tfstate"

      - name: Terraform Plan Destroy
        id: plan_destroy
        working-directory: packages/infrastructure/terraform/environments/pr
        run: |
          terraform plan -destroy -no-color -out=tfplan-destroy 2>&1 | tee plan_destroy_output.txt
          echo "stdout<<EOF" >> $GITHUB_OUTPUT
          cat plan_destroy_output.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Comment Destroy Plan
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request?.number ?? context.payload.issue?.number;
            const fs = require('fs');
            const plan = fs.readFileSync('packages/infrastructure/terraform/environments/pr/plan_destroy_output.txt', 'utf8');
            const output = '#### Terraform Destroy Plan 🗑️\n'
              + '<details><summary>Show Destroy Plan</summary>\n\n'
              + '```terraform\n' + plan + '\n```\n'
              + '</details>';
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: output
            });

      - name: Destroy PR Infrastructure
        working-directory: packages/infrastructure/terraform/environments/pr
        run: terraform apply tfplan-destroy

      - name: Comment on destroy failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request?.number ?? context.payload.issue?.number;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: `❌ **Destroy Failed**\n\nCheck workflow logs for details. Manual cleanup may be needed.`
            });

      - name: Comment destruction complete
        if: success() && github.event.action != 'closed'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request?.number ?? context.payload.issue?.number;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: `✅ **PR Environment Destroyed**\n\nThe preview environment has been cleaned up.`
            });
