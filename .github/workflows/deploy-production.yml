# Deploys to production environment on main branch pushes or manual triggers
name: Deploy Production

on:
  push:
    branches:
      - main # Automatically deploy when commits are pushed to main
  workflow_dispatch: # Allow manual deployment triggers

env:
  DOCKER_USERNAME: developeraipacto
  IMAGE_NAME: ${{ github.repository }} # Repository name for image tagging

jobs:
  build-and-deploy:
    name: Build and Deploy to Production
    runs-on: ubuntu-latest
    environment: production # Uses GitHub environment protection rules
    if: github.ref == 'refs/heads/main' # Extra safety check for main branch
    permissions:
      contents: read # Read repository contents
      packages: write # Push to GitHub Container Registry
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }} # AWS credentials for Terraform backend
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_EC2_METADATA_DISABLED: true
      TF_VAR_hcloud_token: ${{ secrets.HCLOUD_TOKEN }} # Hetzner Cloud token for infrastructure

    steps:
      # Get the source code for this commit
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate required secrets
        run: |
          if [ -z "${{ secrets.HCLOUD_TOKEN }}" ]; then
            echo "❌ HCLOUD_TOKEN secret is required"
            exit 1
          fi
          if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
            echo "❌ AWS_ACCESS_KEY_ID secret is required"
            exit 1
          fi
          if [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
            echo "❌ AWS_SECRET_ACCESS_KEY secret is required"
            exit 1
          fi
          if [ -z "${{ secrets.SSH_KEY_NAME }}" ]; then
            echo "❌ SSH_KEY_NAME secret is required"
            exit 1
          fi
          if [ -z "${{ secrets.NOMAD_PRODUCTION_ADDR }}" ]; then
            echo "❌ NOMAD_PRODUCTION_ADDR secret is required"
            exit 1
          fi
          if [ -z "${{ secrets.NOMAD_PRODUCTION_TOKEN }}" ]; then
            echo "❌ NOMAD_PRODUCTION_TOKEN secret is required"
            exit 1
          fi
          echo "✅ All required secrets are present"

      - name: Validate infrastructure files
        run: |
          if [ ! -f "packages/infrastructure/docker/server.Dockerfile" ]; then
            echo "❌ Server Dockerfile not found"
            exit 1
          fi
          if [ ! -f "packages/infrastructure/docker/web.Dockerfile" ]; then
            echo "❌ Web Dockerfile not found"
            exit 1
          fi
          if [ ! -d "packages/infrastructure/terraform/environments/production" ]; then
            echo "❌ Production Terraform environment not found"
            exit 1
          fi
          if [ ! -f "packages/infrastructure/terraform/scripts/deploy-nomad-jobs.sh" ]; then
            echo "❌ Nomad deploy script not found"
            exit 1
          fi
          echo "✅ All infrastructure files are present"

      # Set up Docker Buildx for multi-platform builds and caching
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Authenticate with GitHub Container Registry for image pushing
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build and push Docker images for both server and web components
      - name: Build and push images
        run: |
          for service in server web; do
            docker buildx build \
              --file packages/infrastructure/docker/$service.Dockerfile \
              --tag ${{ env.DOCKER_USERNAME }}/aipacto-$service:latest \
              --tag ${{ env.DOCKER_USERNAME }}/aipacto-$service:${{ github.sha }} \
              --push \
              --cache-from type=gha \
              --cache-to type=gha,mode=max \
              .
          done

      # Set up Terraform with latest version for infrastructure management
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "latest" # Latest for security and features

      # Initialize Terraform backend and download providers
      - name: Terraform Init
        working-directory: packages/infrastructure/terraform/environments/production
        run: terraform init

      - name: Create tfvars
        working-directory: packages/infrastructure/terraform/environments/production
        run: |
          cat > terraform.auto.tfvars <<EOF
          ssh_key_names = ["${{ secrets.SSH_KEY_NAME }}"]
          EOF

      # Generate execution plan to preview infrastructure changes
      - name: Terraform Plan
        id: plan
        working-directory: packages/infrastructure/terraform/environments/production
        run: |
          terraform plan -no-color -out=tfplan 2>&1 | tee plan_output.txt
          echo "stdout<<EOF" >> $GITHUB_OUTPUT
          cat plan_output.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # Apply the planned infrastructure changes
      - name: Terraform Apply
        working-directory: packages/infrastructure/terraform/environments/production
        run: terraform apply -auto-approve tfplan -var="domain_name=${{ vars.PRODUCTION_DOMAIN }}"

      # Deploy application services to Nomad cluster
      - name: Deploy to Nomad
        working-directory: packages/infrastructure
        env:
          NOMAD_ADDR: ${{ secrets.NOMAD_PRODUCTION_ADDR }}
          NOMAD_TOKEN: ${{ secrets.NOMAD_PRODUCTION_TOKEN }}
        run: ./terraform/scripts/deploy-nomad-jobs.sh

      # Wait for services to be healthy before considering deployment successful
      - name: Wait for deployment
        timeout-minutes: 5 # Prevent infinite loop
        run: |
          for i in {1..30}; do
            if curl -f "https://${{vars.PRODUCTION_DOMAIN}}/health"; then
              echo "✅ Deployment healthy"
              break
            fi
            echo "Waiting for deployment... ($i/30)"
            sleep 10
          done
          if [ $i -eq 30 ]; then
            echo "❌ Deployment health check timed out"
            exit 1
          fi

      - name: Notify deployment success
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: `✅ Production deployment successful! Commit: ${{ github.sha }}\nURL: https://${{ vars.PRODUCTION_DOMAIN }}`
            });

      - name: Notify deployment failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: `❌ Production deployment failed! Check workflow logs for details.`
            });
