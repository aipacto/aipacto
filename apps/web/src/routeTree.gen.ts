/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as MarketingRouteImport } from './routes/_marketing'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as MarketingIndexRouteImport } from './routes/_marketing/index'
import { Route as AuthenticatedDashboardRouteImport } from './routes/_authenticated/dashboard'
import { Route as AuthenticatedDocsIndexRouteImport } from './routes/_authenticated/docs/index'
import { Route as AuthenticatedDocsDocIdRouteImport } from './routes/_authenticated/docs/$docId'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const MarketingRoute = MarketingRouteImport.update({
  id: '/_marketing',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const MarketingIndexRoute = MarketingIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MarketingRoute,
} as any)
const AuthenticatedDashboardRoute = AuthenticatedDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedDocsIndexRoute = AuthenticatedDocsIndexRouteImport.update({
  id: '/docs/',
  path: '/docs/',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedDocsDocIdRoute = AuthenticatedDocsDocIdRouteImport.update({
  id: '/docs/$docId',
  path: '/docs/$docId',
  getParentRoute: () => AuthenticatedRoute,
} as any)

export interface FileRoutesByFullPath {
  '/login': typeof LoginRoute
  '/dashboard': typeof AuthenticatedDashboardRoute
  '/': typeof MarketingIndexRoute
  '/docs/$docId': typeof AuthenticatedDocsDocIdRoute
  '/docs': typeof AuthenticatedDocsIndexRoute
}
export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/dashboard': typeof AuthenticatedDashboardRoute
  '/': typeof MarketingIndexRoute
  '/docs/$docId': typeof AuthenticatedDocsDocIdRoute
  '/docs': typeof AuthenticatedDocsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/_marketing': typeof MarketingRouteWithChildren
  '/login': typeof LoginRoute
  '/_authenticated/dashboard': typeof AuthenticatedDashboardRoute
  '/_marketing/': typeof MarketingIndexRoute
  '/_authenticated/docs/$docId': typeof AuthenticatedDocsDocIdRoute
  '/_authenticated/docs/': typeof AuthenticatedDocsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/login' | '/dashboard' | '/' | '/docs/$docId' | '/docs'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/dashboard' | '/' | '/docs/$docId' | '/docs'
  id:
    | '__root__'
    | '/_authenticated'
    | '/_marketing'
    | '/login'
    | '/_authenticated/dashboard'
    | '/_marketing/'
    | '/_authenticated/docs/$docId'
    | '/_authenticated/docs/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  MarketingRoute: typeof MarketingRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_marketing': {
      id: '/_marketing'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof MarketingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_marketing/': {
      id: '/_marketing/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof MarketingIndexRouteImport
      parentRoute: typeof MarketingRoute
    }
    '/_authenticated/dashboard': {
      id: '/_authenticated/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthenticatedDashboardRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/docs/': {
      id: '/_authenticated/docs/'
      path: '/docs'
      fullPath: '/docs'
      preLoaderRoute: typeof AuthenticatedDocsIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/docs/$docId': {
      id: '/_authenticated/docs/$docId'
      path: '/docs/$docId'
      fullPath: '/docs/$docId'
      preLoaderRoute: typeof AuthenticatedDocsDocIdRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
  }
}

interface AuthenticatedRouteChildren {
  AuthenticatedDashboardRoute: typeof AuthenticatedDashboardRoute
  AuthenticatedDocsDocIdRoute: typeof AuthenticatedDocsDocIdRoute
  AuthenticatedDocsIndexRoute: typeof AuthenticatedDocsIndexRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedDashboardRoute: AuthenticatedDashboardRoute,
  AuthenticatedDocsDocIdRoute: AuthenticatedDocsDocIdRoute,
  AuthenticatedDocsIndexRoute: AuthenticatedDocsIndexRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

interface MarketingRouteChildren {
  MarketingIndexRoute: typeof MarketingIndexRoute
}

const MarketingRouteChildren: MarketingRouteChildren = {
  MarketingIndexRoute: MarketingIndexRoute,
}

const MarketingRouteWithChildren = MarketingRoute._addFileChildren(
  MarketingRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  MarketingRoute: MarketingRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
